for(i in 1:length(pricenames)){
mylist <- list();
irfLists <- append(irfLists,list(mylist));
}
informationShareListMax <-list();
informationShareListMin <- list();
counter <- 1;
for(i in 1:length(dates)) {
a <- dates[i];
pVector <- na.locf(Data.xts[dateVector == a]);
#Check if pVector is not empty (even after filtering out holidays, there still seems to be
#a day in the sample which does not contain any trading data)
if(!(sum(is.na(pVector)) == nrow(pVector) * ncol(pVector))){
modelData <- systemData(pVector,lagNumbers)
fitsur <- systemfit(systemFormulas,data = modelData,method = "SUR");
coefficientMatrix <- matrix(coef(fitsur), nrow = length(pricenames), byrow = TRUE);
for(j in 1:length(pricenames)){
irf <- impulseResponseFunction(coefficientMatrix,lagNumbers,j,a);
irfLists[[j]][[counter]] <- irf;
}
ifShare <- informationShare(coefficientMatrix,lagNumbers,600,systemFormulas,modelData)
informationShareListMin[[counter]] <- ifShare[[1]];
informationShareListMax[[counter]] <- ifShare[[2]];
counter <- counter + 1;
}
}
#Taking averages of the impulse response functions
for(i in 1:length(pricenames)){
#Take average of all irfs in list
impulseResponse <- Reduce("+",irfLists[[i]]) * (1 / (counter -1))
plotIRF(impulseResponse,paste("Shock to ",pricenames[i],sep = ""),pricenames);
plotName <- paste(paste("Shock to ",pricenames[i],sep = ""),".png",sep = "");
dev.copy(png,paste(outputPath,plotName,sep = ""))
dev.off()
}
infShareMin <- informationShareSummary(informationShareListMin,paste(pricenames, "Min", sep = " "));
infShareMax <- informationShareSummary(informationShareListMax,paste(pricenames, "Max", sep = " "));
#The next section formates the table in the format Hasboruck (2003) uses. However, the header are
#too large for an A4 format. Adjusting for multiple row headers, is very complicated and
#is something for later on.
summaryTable <- NULL;
colnamesTable <- NULL;
for(i in 1:length(pricenames)){
summaryTable <- cbind(summaryTable,infShareMin[,i],infShareMax[,i])
colnamesTable <- c(colnamesTable,colnames(infShareMin)[i],colnames(infShareMax)[i])
}
#Remove dots from column headers
colnames(summaryTable) <- gsub("\\."," ",colnamesTable)
#xtable(summaryTable,caption = "Information Shares",digits = 3)
colnames(infShareMin) <- pricenames;
colnames(infShareMax) <- pricenames;
xtable(infShareMin,digits = 3,caption = "Min Information Shares")
xtable(infShareMax,digits = 3,caption = "Max Information Shares")
library(xts)
library(lubridate)
library(timeDate)
#set standard timezone
Sys.setenv(TZ='GMT')
#Use double backward slashes when defining the paths
inputPath <- "C:\\Users\\Ritsaart\\Documents\\R\\Hasbrouck SAS\\Input\\";
cleanedDataPath <- "C:\\Users\\Ritsaart\\Documents\\R\\Hasbrouck SAS\\Cleaned Data\\"
# input data
ETF.SP500.March.Quote <- read.csv(paste(inputPath,"2000_quotes-2000-03-SPY.A.csv",sep = ""), header=TRUE, stringsAsFactors=FALSE)
ETF.SP500.April.Quote <- read.csv(paste(inputPath,"2000_quotes-2000-04-SPY.A.csv",sep = ""), header=TRUE, stringsAsFactors=FALSE)
ETF.SP500.May.Quote <- read.csv(paste(inputPath,"2000_quotes-2000-05-SPY.A.csv",sep= ""), header=TRUE, stringsAsFactors=FALSE)
ETF.SP500.March.trade <- read.csv(paste(inputPath,"2000_trades-2000-03-SPY.csv",sep= ""),header=TRUE, stringsAsFactors=FALSE)
ETF.SP500.April.trade <- read.csv(paste(inputPath,"2000_trades-2000-04-SPY.csv",sep = ""),header=TRUE, stringsAsFactors=FALSE)
ETF.SP500.May.trade <- read.csv(paste(inputPath,"2000_trades-2000-05-SPY.csv", sep = ""),header=TRUE, stringsAsFactors=FALSE)
pit_price.SP500.March.set1 <- read.csv(paste(inputPath,"2000_trades-2000-03-2SPH0.csv",sep = ""),header=TRUE, stringsAsFactors=FALSE)
pit_price.SP500.March.set2 <- read.csv(paste(inputPath,"2000_trades-2000-03-2SPM0.csv",sep = ""),header=TRUE, stringsAsFactors=FALSE)
pit_price.SP500.April <- read.csv(paste(inputPath,"2000_trades-2000-04-2SPM0.csv",sep = ""),header=TRUE, stringsAsFactors=FALSE)
pit_price.SP500.May <- read.csv(paste(inputPath,"2000_trades-2000-05-2SPM0.csv", sep = ""),header=TRUE, stringsAsFactors=FALSE)
E_mini.SP500.March.set1 <- read.csv(paste(inputPath,"2000_trades-2000-03-ESH0.csv", sep = ""),header=TRUE, stringsAsFactors=FALSE)
E_mini.SP500.March.set2 <- read.csv(paste(inputPath,"2000_trades-2000-03-ESM0.csv", sep = ""),header=TRUE, stringsAsFactors=FALSE)
E_mini.SP500.April <- read.csv(paste(inputPath,"2000_trades-2000-04-ESM0.csv", sep = ""),header=TRUE, stringsAsFactors=FALSE)
E_mini.SP500.May <- read.csv(paste(inputPath,"2000_trades-2000-05-ESM0.csv", sep = ""),header=TRUE, stringsAsFactors=FALSE)
#Simply moving average filter
#input:
#data: data frame for filtering
#filterVar: variable which needs to be filtered
#thresholdPercentages: percentage of the mean of the filterVar at which the
#filterVar can deviate from the moving average
#n: number of periods for the moving average
movingAverageFilterCentered <- function(data,filterVar,thresholdPercentages,n){
dates <- as.POSIXct(as.character(data[,"Date.L."]),format = "%Y%m%d",tz = "GMT");
threshold <- mean(data[,filterVar],na.rm = TRUE) *  (thresholdPercenatages/100);
print(threshold);
movingAverage <- as.numeric(filter(data[,filterVar],rep(1/n,n), sides=2))
movingAverage[1:((n - 1) / 2 )] <- data[1:((n - 1) / 2 ),filterVar];
data2 <- data[(data[,filterVar] - movingAverage < threshold) & (movingAverage - data[,filterVar] < threshold),];
return(data2)
}
filterQuote <- function(quoteData) {
#remove negative spreads and spreads greater than 1
quoteData1 <- subset(quoteData, (Ask.Price - Bid.Price) > 0 & (Ask.Price - Bid.Price) <1);
#remove prices 50 cents greater than moving avarage
#
quoteData2 <- movingAverageFilterCentered(quoteData1,"Ask.Price",0.2 ,11)
quoteData3 <- movingAverageFilterCentered(quoteData2,"Bid.Price",0.2,11)
#remove empty values
quoteData4 <- quoteData3[quoteData3["Quote.Time"] != "" & !is.na(quoteData3[,"Ask.Price"]) & !is.na(quoteData3[,"Bid.Price"]) & !is.na(quoteData3[,"Date.L."]),];
return(quoteData4)
}
filterTradeData <- function(tradeData) {
#filter out values 50 cent larger than moving avarage of the past 10 days
step1 <- movingAverageFilterCentered(tradeData,"Price",0.2,11)
#filter out unusual trades
step2 <- step1[step1["Type"] == "Trade",];
step3 <- step2[step2["Exch.Time"] != "" & !is.na(step2[,"Price"]) & !is.na(step2[,"Date.L."]),];
return(step3)
}
# function takes to data frames does a roll over on the rollOverDate specified as "%Y%m%d".
rollOver <- function(dataSet1,dataSet2,rollOverDate){
data1 <- dataSet1[dataSet1[,"Date.L."] <= rollOverDate,]
data2 <- dataSet2[dataSet2[,"Date.L."] > rollOverDate,]
data3 <- rbind(data1,data2)
return(data3)
}
# This function creates a POSIXct object which contains all time on which
# the market was pen between the startDate and endate
createSequence <- function(startDate,endDate,marketOpen,marketClose){
start <- as.POSIXct(paste(as.character(startDate),marketOpen, sep = " ", collapse = NULL), tz = "GMT", format = "%Y%m%d %H:%M:%S")
end <- as.POSIXct(paste(as.character(endDate),marketClose, sep = " ", collapse = NULL), tz = "GMT", format = "%Y%m%d %H:%M:%S")
timeSequence <- seq(from=start,to=end,by = "sec")
#remove weekends
timeSequence <- timeSequence[wday(timeSequence) != 1 & wday(timeSequence) != 7]
#remove holidays
holidayDates <- as.timeDate(strftime(holidayNYSE(unique(year(timeSequence))),format = "%Y-%m-%d"))
dateVector <- as.timeDate(strftime(timeSequence,format = "%Y-%m-%d"))
timeSequence <- timeSequence[!is.element(dateVector@Data,holidayDates@Data)]
#remove times before and after market close
dateVector <- as.character(date(timeSequence))
marketOpenVector <- as.POSIXct(paste(dateVector,marketOpen, sep = " ", collapse = NULL), tz = "GMT", format = "%Y-%m-%d %H:%M:%S")
marketCloseVector <-as.POSIXct(paste(dateVector,marketClose, sep = " ", collapse = NULL), tz = "GMT", format = "%Y-%m-%d %H:%M:%S")
timeSequence <- timeSequence[timeSequence >= marketOpenVector & timeSequence <= marketCloseVector]
return(timeSequence)
}
#This function creates an xts object from the dataframe objects. It also filters out all
#price data before the market open and after the market close.
createXTS <- function(data, dateVar,timeVar, priceVar,marketOpen,marketClose){
timeVector <- paste(as.character(data[,dateVar]),data[,timeVar], sep = " ", collapse = NULL);
options(digits.secs = 3);
data$timeDate <- as.POSIXct(timeVector,tz = "GMT", format = "%Y%m%d %H:%M:%S");
#filter out trades before opening and after close
marketOpenVector <- as.POSIXct(paste(as.character(data[,dateVar]),marketOpen, sep = " ", collapse = NULL), tz = "GMT", format = "%Y%m%d %H:%M:%S");
marketCloseVector <-as.POSIXct(paste(as.character(data[,dateVar]),marketClose, sep = " ", collapse = NULL), tz = "GMT", format = "%Y%m%d %H:%M:%S");
dataFiltered <- data[data[,"timeDate"] >= marketOpenVector & data[,"timeDate"] <= marketCloseVector,];
time_series <- xts(dataFiltered[,priceVar], order.by = dataFiltered$timeDate);
#add market openings
#time_series <- addMarketOpenings(time_series,marketOpen)
return(time_series)
}
# Do the roll over
E_mini.SP500.March <- rollOver(E_mini.SP500.March.set1,E_mini.SP500.March.set2,20000309);
pit_price.SP500.March <- rollOver(pit_price.SP500.March.set1,pit_price.SP500.March.set2,20000309);
# Aggregate the monthly data.
ETF.SP500.Quote <- rbind(ETF.SP500.March.Quote, ETF.SP500.April.Quote, ETF.SP500.May.Quote);
ETF.SP500.trade <- rbind(ETF.SP500.March.trade,ETF.SP500.April.trade,ETF.SP500.May.trade);
pit_price.SP500 <- rbind(pit_price.SP500.March,pit_price.SP500.April,pit_price.SP500.May);
E_mini.SP500 <- rbind(E_mini.SP500.March,E_mini.SP500.April,E_mini.SP500.May);
# Filter the data
ETF.SP500.Quote <- filterQuote(ETF.SP500.Quote);
ETF.SP500.trade <- filterTradeData(ETF.SP500.trade);
pit_price.SP500 <- filterTradeData(pit_price.SP500);
E_mini.SP500.trade <- filterTradeData(E_mini.SP500);
# create a midpoint variable
ETF.SP500.Quote$midpoint <- (ETF.SP500.Quote$Ask.Price + ETF.SP500.Quote$Bid.Price) / 2;
# Create XTS objects
ETF.SP500.Quote.xts <- createXTS(ETF.SP500.Quote,"Date.L.","Quote.Time","midpoint", "14:30:00", "21:00:00");
ETF.SP500.trade.xts <- createXTS(ETF.SP500.trade,"Date.L.","Exch.Time","Price", "14:30:00", "21:00:00");
pit_price.SP500.xts <- createXTS(pit_price.SP500,"Date.L.","Exch.Time","Price", "14:30:00", "21:00:00");
E_mini.SP500.trade.xts <- createXTS(E_mini.SP500.trade,"Date.L.","Exch.Time","Price", "14:30:00", "21:00:00");
# Aggregate the xts objects on seconds
ETF.SP500.Quote.xts <- ETF.SP500.Quote.xts[endpoints(ETF.SP500.Quote.xts, on = "seconds", k = 1)];
ETF.SP500.trade.xts <- ETF.SP500.trade.xts[endpoints(ETF.SP500.trade.xts, on = "seconds", k = 1)];
pit_price.SP500.xts <- pit_price.SP500.xts[endpoints(pit_price.SP500.xts, on = "seconds", k = 1)];
E_mini.SP500.trade.xts <- E_mini.SP500.trade.xts[endpoints(E_mini.SP500.trade.xts, on = "seconds", k = 1)];
# Create a sequence of all time at which the market is open between the first and the last day
# of the sample data.
marketTimes <- createSequence(20000301,20000531,"14:30:00","21:00:00");
#Merge all the data with this timesequence.
pVector <- merge.xts(ETF.SP500.Quote.xts,merge.xts(ETF.SP500.trade.xts,
merge.xts(pit_price.SP500.xts,merge.xts(E_mini.SP500.trade.xts, marketTimes,join = "right"),
join = "right"),join = "right"),join = "right")
colnames(pVector) <- c("ETF Quote Midpoint","ETF Trade Price","Pit Contract Price","E-mini Contract Price")
write.zoo(pVector,file = paste(cleanedDataPath,"pVector.csv",sep = ""),sep = ",");
library(xts)
library(lubridate)
library(timeDate)
library(systemfit)
library(xtable)
library(pracma)
#library(irtoys)
#set standard timezone
Sys.setenv(TZ='GMT')
#User input
#lagnumbers (either fill in nMA or choose a custom vector of which lags to include)
nMA <- 10;
lagNumbers <- c(1:nMA);
#Paths
cleanedDataPath <- "C:\\Users\\Ritsaart\\Documents\\R\\Hasbrouck SAS\\Cleaned Data\\"
outputPath <- "C:\\Users\\Ritsaart\\Documents\\R\\Hasbrouck SAS\\Output\\"
#This function creates a list of equations which form a VECM system. The z variables
#represent the cointegration relationship which are defined as:z_{x} = p1 - p_{x + 1} where is
#one of the other variables.The lag coefficients are represented as A_{i}_{j}_{k} where k is
#the lag number i and j represent the row and column coordinates in the coefficient matrix.
#input
#lagNumbers: column vector containing all the numbers of the lags to include
#so for examples 1:3 will result in a model with 3 lags.
#pricesnames: names of the variables which need to be estimated
vecmSystem <- function(pricenames,lagNumbers) {
systemFormulas <- vector("list", length(pricenames))
for (i in 1:length(pricenames)){
a <- strcat(c(pricenames[i],"d", " ~ ",0), collapse = "");
for (p in  1:(length(pricenames) -1)) {
a <- strcat(c(a," + ","z",p),collapse = "");
}
for (k in lagNumbers){
for (j in 1:length(pricenames)) {
a <- strcat(c(a," + ",pricenames[j],"dL",k),collapse = "");
}
}
systemFormulas[[i]] <- as.formula(a);
}
return(systemFormulas)
}
# Transforms the data which needed for the estimation of the VECM model. Input is
# the data and the lags which to include.
systemData <- function(pVector,lagNumbers) {
pricenames <- colnames(pVector);
pricenamesL <- paste(pricenames,"L",sep = "",collapse = NULL);
dP <- diff(pVector,1);
colnames(dP) <- paste(pricenames,"d",sep = "",collapse = NULL);
dPL <- timeVector;
for (i in lagNumbers){
dPL1 <- lag(dP, i);
colnames(dPL1) <- paste(pricenames,strcat(c("dL",i),collapse = ""),sep = "", collapse = NULL);
dPL <- merge(dPL1,dPL);
}
pL = lag(pVector,1);
colnames(pL) <- paste(pricenames,"L",sep = "",collapse = NULL);
z <- timeVector;
for (j in 2:length(pricenamesL)){
zj <- pL[,pricenamesL[1]] - pL[,pricenamesL[j]] - (mean(pL[,pricenamesL[1]],na.rm = TRUE) - mean(pL[,pricenamesL[j]],na.rm = TRUE));
z <- merge(zj,z);
}
colnames(z) <- paste("z",seq((length(pricenamesL)-1),1),sep = "" , collapse = NULL);
modelData <- merge.xts(dP,merge.xts(dPL,merge.xts(pL,z)));
modelData <- modelData[rowSums(is.na(modelData)) < 1,];
return(modelData)
}
#This function returns a list of 2 vectors containing the minimum and maximum informationShare
#respectively.
#input
#CoefficientMatrix: a matrix of coefficients of a VECM system
#lagNumbers: vector of lags in the system
#iterations: number of periods to forecast for estimating the C matrix
#systemFormulas: list of equations which together form the VECM model
#modelData: data used to estimate the VECM model
informationShare <- function(coefficientMatrix,lagNumbers,iterations,systemFormulas,modelData) {
numDims <- nrow(coefficientMatrix);
alpha <- coefficientMatrix[,1:numDims-1];
beta <- cbind(rep(1,numDims-1),-1 * diag(numDims-1));
coefficient <- vector("list", length(lagNumbers))
for (i in 1:length(lagNumbers)) {
coefficient[[i]] <- coefficientMatrix[,(numDims + (i-1) * numDims) : ((numDims - 1) + i*numDims) ];
}
C <- matrix(0,numDims,numDims);
for (shockToVariable in 1:numDims){
irf <- matrix(0,numDims,max(lagNumbers) + 1);
irf[shockToVariable,ncol(irf)] <- 1;
p <- irf[,ncol(irf)];
for (j in 1:iterations) {
p <- p + alpha %*% (beta %*% p);
a <- matrix(0,numDims,1);
for (k in 1:length(lagNumbers)) {
a <- a +  coefficient[[k]] %*% (irf[,ncol(irf) - (lagNumbers[k] -1)] - irf[,ncol(irf) - lagNumbers[k]]);
}
p <- p + a;
irf <- cbind(irf,p);
}
C[,shockToVariable] <- p;
}
c <- C[1,];
# Information shares
#To calculate the max and minimum information shares we have to re-order the
#covariance matrix through reordering the euqations which need to be estimated
#to the first equation, the largest amount of variance will be contributed to the last equation
#in systemfit (apperently).And thus this will be used to compute the max information share for
#that particular price. the i variable represents the equation which will come first in the re-
#ordering and the j variable the last.
max.infShare <- matrix(0,1,numDims)
min.infShare <- matrix(0,1,numDims)
for(i in 1:numDims) {
j <- numDims - (i - 1);
#If there is an odd number of equations, i and j can become equal resulting in an
#invalid VECM system.
if(i != j) {
#First create an index for the reordering
nums <- Filter(function(x) x != j & x != i, 1:length(pricenames))
index <- c(i,nums,j)
systemFormulasRearranged <- systemFormulas[index]
fitsur <- systemfit(systemFormulasRearranged,data = modelData,method = "SUR");
omega <- as.matrix(fitsur$residCovEst);
sigmaW <- c[index] %*% omega %*% c[index];
F <- chol(omega)
min.infShare[i] <- ((c[index] %*% F) ^ 2)[1] / sigmaW;
max.infShare[j] <- ((c[index] %*% F) ^ 2)[numDims] / sigmaW
#An odd number of equations means that for the middle variable, both the
#max and minimum information share need to be estimated differently
} else {
#Create two indices, one with the middle index number in the beginning for the maximum
#information share and one with the middle index number last for the minimum information
#share.
nums <- Filter(function(x) x != ceiling(length(pricenames) / 2), 1:numDims)
indexMax <- c(ceiling(numDims / 2),nums);
indexMin <- c(nums,ceiling(numDims / 2));
listIndex <- list(indexMax,indexMin)
#Both the min and max informationshare has to be calculated.
for (x in 1:2){
index <- listIndex[[x]];
systemFormulasRearranged <- systemFormulas[index]
fitsur <- systemfit(systemFormulasRearranged,data = modelData,method = "SUR");
omega <- as.matrix(fitsur$residCovEst);
sigmaW <- c[index] %*% omega %*% c[index];
F <- chol(omega)
if(x == 1){
min.infShare[ceiling(numDims / 2)] <- ((c[index] %*% F) ^ 2)[1] / sigmaW;
} else {
max.infShare[ceiling(numDims / 2)] <- ((c[index] %*% F) ^ 2)[numDims] / sigmaW
}
}
}
}
return(list(min.infShare,max.infShare))
}
#This function returns the irf of a VECM system in matrix form
#input
#coefficientMatrix: matrix of coefficients of a VECM model
#lagNumbers: lags used in the model
#shockToVariable: number of the variable who receives the shock in the
#first period.
#date: If the time series does not converge, an error message is printed
#with this date.
impulseResponseFunction <- function(coefficientMatrix,lagNumbers,shockToVariable,date){
numDims <- nrow(coefficientMatrix);
alpha <- coefficientMatrix[,1:numDims-1];
beta <- cbind(rep(1,numDims-1),-1 * diag(numDims-1));
coefficient <- vector("list", length(lagNumbers))
for (i in 1:length(lagNumbers)) {
coefficient[[i]] <- coefficientMatrix[,(numDims + (i-1) * numDims) : ((numDims - 1) + i*numDims) ];
}
irf <- matrix(0,numDims,max(lagNumbers) + 1);
irf[shockToVariable,ncol(irf)] <- 1;
p <- irf[,ncol(irf)];
for (j in 1:600) {
p <- p + alpha %*% (beta %*% p);
a <- matrix(0,numDims,1);
for (k in 1:length(lagNumbers)) {
a <- a +  coefficient[[k]] %*% (irf[,ncol(irf) - (lagNumbers[k] -1)] - irf[,ncol(irf) - lagNumbers[k]]);
}
p <- p + a;
irf <- cbind(irf,p);
}
irf <- irf[,(max(lagNumbers)+1):ncol(irf)];
if(abs(irf[1,601]-mean(irf[2:numDims,601]) > 0.01)){
print("failed to converge on:");
print(date);
}
return(irf)
}
#Plots an impulse response function. The function should be supplied as a matrix.
#Also a title and legend contents are required.
plotIRF <- function(matrix,titleString,legendnames) {
#If more than four time series need to be plottes, add extra colours
plot_colors <- c(rgb(r=0.0,g=0.0,b=0.9), "red", "forestgreen",rgb(r=0.5,g=0.5,b=0.0))
plot(matrix[1,], type="l", col= plot_colors[1], xlab="seconds",
ylab="Price impact", cex.lab=0.8, lwd=2, ylim = range(c(0,1)))
for (i in 1:nrow(matrix)){
lines(matrix[i,],type = "l",col = plot_colors[i])
}
legend("topleft", legendnames, cex=0.8, col=plot_colors,
lty=1:3, lwd=2, bty="n" );
title(main=titleString)
}
#Function created a dataframe with descriptive statistics also reported in
#Hasbrouck (2003).
informationShareSummary <- function(infList,names) {
infShare <- as.data.frame(matrix(unlist(infList),ncol = length(names), byrow = TRUE))
Median <- sapply(infShare,median);
Mean <- sapply(infShare,mean);
St.Dev <- sapply(infShare,sd);
SEM <- sapply(infShare, function(x) sd(x) / sqrt(length(x)));
descriptiveStatistics <- rbind(Median,Mean,St.Dev,SEM);
colnames(descriptiveStatistics) <- names;
return(descriptiveStatistics)
}
Data <- read.csv(paste(cleanedDataPath,"pVector.csv", sep=""), header=TRUE, stringsAsFactors=FALSE)
dateVector <- as.timeDate(strftime(Data[,"Index"],format = "%Y-%m-%d"));
dates <- unique(dateVector);
timeVector <- as.POSIXct(Data[,"Index"],tz = "GMT", format = "%Y-%m-%d %H:%M:%S");
lagNumbers <- c(1:nMA);
pricenames <- colnames(Data[,2:ncol(Data)])
systemFormulas <- vecmSystem(pricenames,lagNumbers)
Data.xts <- log(as.xts(Data[,2:ncol(Data)], order.by = timeVector)) * 10000;
irfLists <- list();
for(i in 1:length(pricenames)){
mylist <- list();
irfLists <- append(irfLists,list(mylist));
}
informationShareListMax <-list();
informationShareListMin <- list();
counter <- 1;
for(i in 1:length(dates)) {
a <- dates[i];
pVector <- na.locf(Data.xts[dateVector == a]);
#Check if pVector is not empty (even after filtering out holidays, there still seems to be
#a day in the sample which does not contain any trading data)
if(!(sum(is.na(pVector)) == nrow(pVector) * ncol(pVector))){
modelData <- systemData(pVector,lagNumbers)
fitsur <- systemfit(systemFormulas,data = modelData,method = "SUR");
coefficientMatrix <- matrix(coef(fitsur), nrow = length(pricenames), byrow = TRUE);
for(j in 1:length(pricenames)){
irf <- impulseResponseFunction(coefficientMatrix,lagNumbers,j,a);
irfLists[[j]][[counter]] <- irf;
}
ifShare <- informationShare(coefficientMatrix,lagNumbers,600,systemFormulas,modelData)
informationShareListMin[[counter]] <- ifShare[[1]];
informationShareListMax[[counter]] <- ifShare[[2]];
counter <- counter + 1;
}
}
#Taking averages of the impulse response functions
for(i in 1:length(pricenames)){
#Take average of all irfs in list
impulseResponse <- Reduce("+",irfLists[[i]]) * (1 / (counter -1))
plotIRF(impulseResponse,paste("Shock to ",pricenames[i],sep = ""),pricenames);
plotName <- paste(paste("Shock to ",pricenames[i],sep = ""),".png",sep = "");
dev.copy(png,paste(outputPath,plotName,sep = ""))
dev.off()
}
infShareMin <- informationShareSummary(informationShareListMin,paste(pricenames, "Min", sep = " "));
infShareMax <- informationShareSummary(informationShareListMax,paste(pricenames, "Max", sep = " "));
#The next section formates the table in the format Hasbrouck (2003) uses. However, the header are
#too large for an A4 format. Adjusting for multiple row headers, is very complicated and
#is something for later on.
summaryTable <- NULL;
colnamesTable <- NULL;
for(i in 1:length(pricenames)){
summaryTable <- cbind(summaryTable,infShareMin[,i],infShareMax[,i])
colnamesTable <- c(colnamesTable,colnames(infShareMin)[i],colnames(infShareMax)[i])
}
#Remove dots from column headers
colnames(summaryTable) <- gsub("\\."," ",colnamesTable)
#xtable(summaryTable,caption = "Information Shares",digits = 3)
colnames(infShareMin) <- pricenames;
colnames(infShareMax) <- pricenames;
xtable(infShareMin,digits = 3,caption = "Min Information Shares")
xtable(infShareMax,digits = 3,caption = "Max Information Shares")
xtable(summaryTable,caption = "Information Shares",digits = 3)
colnames(summaryTable) <- gsub("\\."\" ",colnamesTable)
xtable(summaryTable,caption = "Information Shares",digits = 3)
colnames(summaryTable) <- gsub("\\."\" ",colnamesTable)
colnames(summaryTable) <- gsub("\\."\\" ",colnamesTable)
colnames(summaryTable) <- gsub("\\.","\",colnamesTable)
colnames(summaryTable) <- gsub("\\.", "\\" ,colnamesTable)
colnames(summaryTable) <- gsub("\\.", "\" ,colnamesTable)
xtable(summaryTable,caption = "Information Shares",digits = 3)
colnames(summaryTable) <- gsub("\\.", "\" ,colnamesTable)
xtable(summaryTable,caption = "Information Shares",digits = 3)
colnames(summaryTable) <- gsub("\\.", "\\" , colnamesTable)
xtable(summaryTable,caption = "Information Shares",digits = 3)
colnames(summaryTable) <- gsub("\\.", "\\" , colnamesTable)
xtable(summaryTable,caption = "Information Shares",digits = 3)
colnames(summaryTable) <- gsub("\\.", "\\\" , colnamesTable)
xtable(summaryTable,caption = "Information Shares",digits = 3)
colnames(summaryTable) <- gsub("\\.", "\\\\" , colnamesTable)
xtable(summaryTable,caption = "Information Shares",digits = 3)
colnames(summaryTable) <- gsub("\\.", "\\\\\\" , colnamesTable)
xtable(summaryTable,caption = "Information Shares",digits = 3)
colnames(summaryTable) <- gsub("\\.", "\\\\\\" , colnamesTable)
colnames(summaryTable) <- gsub("backslash","",colnames(summaryTable));
colnames(summaryTable) <- gsub("\\.", "\\\\\\" , colnamesTable)
colnames(summaryTable) <- gsub("backslash","",colnames(summaryTable));
colnames(summaryTable) <- gsub("\\.", "\\\\\\" , colnamesTable)
colnames(summaryTable) <- gsub("backslash","",colnames(summaryTable));
xtable(summaryTable,caption = "Information Shares",digits = 3)
colnames(summaryTable) <- gsub("\\.", "\\\\" , colnamesTable)
xtable(summaryTable,caption = "Information Shares",digits = 3)
summaryTable <- NULL;
colnamesTable <- NULL;
for(i in 1:length(pricenames)){
summaryTable <- cbind(summaryTable,infShareMin[,i],infShareMax[,i])
colnamesTable <- c(colnamesTable,colnames(infShareMin)[i],colnames(infShareMax)[i])
}
#Remove dots from column headers
colnames(summaryTable) <- gsub("\\.", " " , colnamesTable)
xtable(summaryTable,caption = "Information Shares",digits = 3)
colnames(summaryTable) <- gsub("\\.", " " , colnamesTable)
colnames(summaryTable) <- gsub(" ","\\\\", colnamesTable)
xtable(summaryTable,caption = "Information Shares",digits = 3)
colnames(summaryTable) <- gsub("\\.", " " , colnamesTable)
#colnames(summaryTable) <- gsub(" ","\\\\", colnamesTable)
xtable(summaryTable,caption = "Information Shares",digits = 3)
colnames(summaryTable) <- gsub("\\.", " " , colnamesTable)
colnames(summaryTable) <- gsub(" ","\\\\", colnamesTable)
xtable(summaryTable,caption = "Information Shares",digits = 3)
colnames(summaryTable) <- gsub("\\.", " " , colnamesTable)
#colnames(summaryTable) <- gsub(" ","\\\\", colnamesTable)
xtable(summaryTable,caption = "Information Shares",digits = 3)
xtable(cbind(summaryTable,summaryTable),caption = "Information Shares",digits = 3)
xtable(summaryTable,caption = "Information Shares",digits = 3)
